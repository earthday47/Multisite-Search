<?php
/**
 * Implementation of hook_install().
 */
function multisite_search_install() {
	// Create tables, if they don't already exist
	if (!db_table_exists('multisite_search_dataset')) {
  	drupal_install_schema('multisite_search');
  }
}

/**
 * Implementation of hook_uninstall().
 */
function multisite_search_uninstall() {
  drupal_uninstall_schema('multisite_search');

  // Drop tables.
  db_query('DROP TABLE IF EXISTS {multisite_search_dataset}');
  db_query('DROP TABLE IF EXISTS {multisite_search_index}');
  db_query('DROP TABLE IF EXISTS {multisite_search_settings}');
  db_query('DROP TABLE IF EXISTS {multisite_search_total}');
  db_query('DROP TABLE IF EXISTS {multisite_search_sites}');
}

/**
 * Implementation of hook_schema().
 */
function multisite_search_schema(){  
  $schema['multisite_search_dataset'] = array(
    'description' => 'Stores items that will be searched.',
    'fields' => array(
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Search item ID, e.g. node ID for nodes.',
      ),
      'type' => array(
        'type' => 'varchar',
        'default' => NULL,
        'length' => 16,
        'description' => 'Type of item, e.g. node.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'List of space-separated words from the item.',
      ),
      'subdmn_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
        'description' => 'The db_prefix of the site.',
      ),
    ),
    'indexes' => array(
       'sid_type' => array('sid','type','subdmn_id')
    ),
  );

  $schema['multisite_search_index'] = array(
    'description' => 'Stores the search index, associating words, items and scores.',
    'fields' => array(
      'word' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The {search_total}.word that is associated with the search item.',
        ),
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {search_dataset}.sid of the searchable item to which the word belongs.',
       ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'description' => 'The {search_dataset}.type of the searchable item to which the word belongs.',
       ),
      'subdmn_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The db_prefix of the site.',
      ),
      'fromsid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'fromtype' => array(
        'type' => 'varchar',
        'length' => 16,
        'default' => NULL,
      ),
      'fromsubdmn_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'score' => array(
        'type' => 'float',
        'not null' => FALSE,
        'description' => 'The numeric score of the word, higher being more important.',
      ),
    ),
    'indexes' => array(
       'sid_type' => array('sid','type','subdmn_id'),
       'from_sid_type' => array('fromsid','fromtype','fromsubdmn_id'),
       'word' => array('word')
    ),
  );

  $schema['multisite_search_total'] = array(
    'description' => 'Stores search totals for words.',
    'fields' => array(
      'word' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Primary Key: Unique word in the search index.',
      ),
      'count' => array(
        'description' => "The count of the word in the index using Zipf's law to equalize the probability distribution.",
        'type' => 'float',
        'not null' => FALSE,
      ),
    ),
      'primary key' => array('word'),
  );
  
  $schema['multisite_search_sites'] = array(
    'description' => 'Multisite search Drupal sites that are to be indexed.',
    'fields' => array(
      'site_id' => array(
        'type' => 'serial',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'db_prefix' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'table_prefix' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
        'default' => '',
      ),
      'site_url' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
      ),
			'site_name' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'Weight of site in overview table.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('site_id'),
  );

  $schema['multisite_search_settings'] = array(
    'description' => 'Shared Multisite Search settings, that can\'t go in the variables table.',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
    ),
    'primary key' => array('name'),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N().
 *
 * Drop the old, long named tables.
 */
function multisite_search_update_6200() {
  $ret = array();
  
  if (db_table_exists('multisite_drupal_search_dataset')) {
    // updating from 6.x-1.1
    
    db_drop_table($ret, 'multisite_drupal_search_dataset');
    db_drop_table($ret, 'multisite_drupal_search_index');
    db_drop_table($ret, 'multisite_drupal_search_total');
    db_drop_table($ret, 'multisite_drupal_search_sites');  

    drupal_install_schema('multisite_search');
    cache_clear_all();

  } else {
    // updating from 6.x-2.0
  
    variable_del('multisite_search_cron_ttl');
    variable_del('multisite_search_last_cron_execution');

    if (!db_column_exists('multisite_search_sites', 'weight')) {
      db_add_field($ret, 'multisite_search_sites', 'weight', array(
        'description' => 'Weight of site in overview table.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ));
    }
    
    if (!db_table_exists('multisite_search_settings')) {
      db_create_table($ret, 'multisite_search_settings', array(
        'description' => 'Shared Multisite Search settings, that can\'t go in the variables table.',
        'fields' => array(
          'name' => array(
            'description' => 'The name of the variable.',
            'type' => 'varchar',
            'length' => 128,
            'not null' => TRUE,
            'default' => ''
          ),
          'value' => array(
            'description' => 'The value of the variable.',
            'type' => 'text',
            'not null' => TRUE,
            'size' => 'big'
          ),
        ),
        'primary key' => array('name'),
      ));
    }

  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 * Add the db_prefix field to multisite_search_sites. Split table_prefix values existing in database.
 */
function multisite_search_update_6201() {
  $ret = array();
  
  // add db_prefix field
  db_add_field($ret, 'multisite_search_sites', 'db_prefix', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
  
  // change table_prefix field to be default
  db_change_field($ret, 'multisite_search_sites', 'table_prefix', 'table_prefix', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
  
  // Get existing table_prefix values and split into db_prefix and table_prefix
  $result = db_query('select * from {multisite_search_sites}');
  while ($site = db_fetch_object($result)) {
    $new_db_prefix = '';
    $new_table_prefix = '';
    if (preg_match('/./', $site->table_prefix)) {
      $prefix_values = explode('.', $site->table_prefix);
      $new_db_prefix = db_escape_table($prefix_values[0]);
      $new_table_prefix = db_escape_table($prefix_values[1]);
    } else {
      $new_table_prefix = db_escape_table($site->table_prefix);
    }
    $ret[] = update_sql("UPDATE {multisite_search_sites} SET db_prefix = '$new_db_prefix', table_prefix = '$new_table_prefix' WHERE site_id = '$site->site_id'");
  }
  
  return $ret;
}