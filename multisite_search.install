<?php
/**
 * Implementation of hook_install().
 */
function multisite_search_install() {
	// Create tables. Will produce error if table sharing is configured
	drupal_install_schema('multisite_search');
}

/**
 * Implementation of hook_uninstall().
 */
function multisite_search_uninstall() {
  drupal_uninstall_schema('multisite_search');

  // Drop tables.
  db_query('DROP TABLE IF EXISTS {multisite_search_dataset}');
  db_query('DROP TABLE IF EXISTS {multisite_search_index}');
  db_query('DROP TABLE IF EXISTS {multisite_search_total}');
  db_query('DROP TABLE IF EXISTS {multisite_search_sites}');
}

/**
 * Implementation of hook_update_N()
 */
/*function multisite_search_update_6200() {
}*/

/**
 * Implementation of hook_schema().
 */
function multisite_search_schema(){  
  $schema['multisite_search_dataset'] = array(
    'description' => 'Stores items that will be searched.',
    'fields' => array(
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Search item ID, e.g. node ID for nodes.',
      ),
      'type' => array(
        'type' => 'varchar',
        'default' => NULL,
        'length' => 16,
        'description' => 'Type of item, e.g. node.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'List of space-separated words from the item.',
      ),
      'subdmn_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
        'description' => 'The db_prefix of the site.',
      ),
    ),
    'indexes' => array(
       'sid_type' => array('sid','type','subdmn_id')
    ),
  );

  $schema['multisite_search_index'] = array(
    'description' => 'Stores the search index, associating words, items and scores.',
    'fields' => array(
      'word' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The {search_total}.word that is associated with the search item.',
        ),
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {search_dataset}.sid of the searchable item to which the word belongs.',
       ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'description' => 'The {search_dataset}.type of the searchable item to which the word belongs.',
       ),
      'subdmn_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The db_prefix of the site.',
      ),
      'fromsid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'fromtype' => array(
        'type' => 'varchar',
        'length' => 16,
        'default' => NULL,
      ),
      'fromsubdmn_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'score' => array(
        'type' => 'float',
        'not null' => FALSE,
        'description' => 'The numeric score of the word, higher being more important.',
      ),
    ),
    'indexes' => array(
       'sid_type' => array('sid','type','subdmn_id'),
       'from_sid_type' => array('fromsid','fromtype','fromsubdmn_id'),
       'word' => array('word')
    ),
  );

  $schema['multisite_search_total'] = array(
    'description' => 'Stores search totals for words.',
    'fields' => array(
      'word' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Primary Key: Unique word in the search index.',
      ),
      'count' => array(
        'description' => "The count of the word in the index using Zipf's law to equalize the probability distribution.",
        'type' => 'float',
        'not null' => FALSE,
      ),
    ),
      'primary key' => array('word'),
  );
  
  $schema['multisite_search_sites'] = array(
    'description' => 'Multisite search Drupal sites that are to be indexed.',
    'fields' => array(
      'site_id' => array(
        'type' => 'serial',
        'length' => 11,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'table_prefix' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
      ),
      'site_url' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
      ),
			'site_name' => array(
        'type' => 'varchar',
        'length' => 225,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'Weight of site in overview table.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('site_id'),
  );

  $schema['multisite_search_settings'] = array(
    'description' => 'Shared Multisite Search settings, that can\'t go in the variables table.',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
    ),
    'primary key' => array('name'),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N().
 *
 * Add a "weight" field to the multisite_search_sites table.
 */
function multisite_search_update_6200(&$sandbox) {
  $ret = array();
  db_add_field($ret, 'multisite_search_sites', 'weight', array(
    'description' => 'Weight of site in overview table.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Implementation of hook_update_N().
 *
 * Add the multisite_search_settings table.
 */
function multisite_search_update_6210(&$sandbox) {
  db_create_table($ret, 'multisite_search_settings', array(
    'description' => 'Shared Multisite Search settings, that can\'t go in the variables table.',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => ''
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
    ),
    'primary key' => array('name'),
  ));
  return $ret;
}