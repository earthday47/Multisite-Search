<?php

/**
 * @file
 * Drupal Multisite search installation.
 */

/**
 * Implementation of hook_help().
 */
function multisite_search_help($path,$arg) {
  global $user;
  switch ($path) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Notify site admin when new node has been created.');
  }
}

/**
 * Implementation of hook_theme().
 */
function multisite_search_theme() {
  return array(
    'multisite_search_overview_form' => array(
      'arguments' => array(
        'form' => NULL
      ),
    ),
    'multisite_search_theme_form' => array(
      'arguments' => array(
        'form' => NULL
      ),
    ),
    'multisite_search_block_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
		'multisite_search_theme_search_result' => array(
      'arguments' => array(
        'result' => NULL,
        'type' => NULL,
      ),
      'template' => 'multisite_search-result',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function multisite_search_perm() {
  return array('administer multisite search');
}

/**
 * Implementation of hook_menu().
 */
function multisite_search_menu() {
  $items['admin/settings/multisite-search'] = array(
    'title' => 'Multisite Configuration',
    'description' => 'Configure sites to be indexed in a Multisite installation environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_overview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/multisite-search/sites'] = array(
    'title' => 'Multisite Configuration',
    'description' => 'Configure sites to be indexed in a Multisite installation environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_overview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/settings/multisite-search/cron'] = array(
    'title' => 'Multisite Cron Configuration',
    'description' => 'Manage cron execution for multisite indexing process',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_cron_settings'),        
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;	
}

/**
 * Menu callback; shows Multisites in a draggable table
 */
function multisite_search_overview_form($form_state) {

  $num_sites = db_result(db_query("SELECT COUNT(site_id) FROM {multisite_search_sites}"));
  
  $form = array(
    '#tree' => TRUE,
  );

  // get existing sub-sites and format the way theme_table likes
  $query = db_query("SELECT site_id, table_prefix, site_url, site_name, weight FROM {multisite_search_sites} ORDER BY weight");
  while($site = db_fetch_array($query)) {
    //dpm($site);
    $siteid = 'site:' . $site['site_id'];
    $form[$siteid]['title'] = array(
      '#value' => check_plain($site['site_name']),
    );
    $form[$siteid]['url'] = array(
      '#value' => check_plain($site['site_url']),
    );
    $form[$siteid]['prefix'] = array(
      '#value' => check_plain($site['table_prefix']),
    );
    $form[$siteid]['weight'] = array(
      '#type' => 'weight',
      '#delta' => $num_sites,
      '#default_value' => $site['weight'],
    );
    $form[$siteid]['siteid'] = array(
      '#type' => 'hidden',
      '#value' => $site['site_id'],
    );
    $form[$siteid]['operations']['edit'] = array(
      '#value' => l('edit', 'admin/settings/multisite-search/site/' . $site['site_id'] . '/edit'),
    );
    $form[$siteid]['operations']['delete'] = array(
      '#value' => l('delete', 'admin/settings/multisite-search/site/' . $site['site_id'] . '/delete'),
    );
    $form[$siteid]['#attributes'] = array(
      'class' => 'multisite-search-site'
    );
  }
  if (element_children($form)) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    );
  }
  else {
    $form['empty_menu'] = array('#value' => t('There are no sites set up yet. ') . l('Add one now', 'admin/settings/multisite-search/site/' . $site['site_id'] . '/add'));
  }

  //dpm($form);
  return $form;
}

/**
 * Submit handler for the multisite search overview form.
 *
 * @see multisite_search_overview_form()
 */
function multisite_search_overview_form_submit($form, &$form_state) {
  $updated_items = array();
  foreach (element_children($form) as $siteid) {
    // strict compare checks that the value is 0 and not NULL; that is, the string is at the beginning
    if (strpos($siteid, 'site:') === 0) {
      $element = $form[$siteid];
      // if the "weight" value is different from the default, queue it for updating
      if ($element['weight']['#value'] != $element['weight']['#default_value']) {
        $updated_items[] = $element;
      }
    }
  }
  // Save all our changed items to the database.
  foreach ($updated_items as $item) {
    // @TODO: Abstract this into a function
    db_query('UPDATE {multisite_search_sites} SET weight = %s WHERE site_id = %s', array($item['weight']['#value'], $item['siteid']['#value']));
  }
}

/**
 * Theme the multisite search overview form into a table.
 *
 * @ingroup themeable
 */
function theme_multisite_search_overview_form($form) {
  drupal_add_tabledrag('multisite-search-overview', 'order', 'sibling', 'multisite-search-weight');

  $header = array(
    t('Site Name'),
    t('Site URL'),
    t('Table Prefix'),
    t('Weight'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $rows = array();
  foreach (element_children($form) as $siteid) {
    // strict compare checks that the value is 0 and not NULL; that is, the string is at the beginning
    if (strpos($siteid, 'site:') === 0) {
      $element = &$form[$siteid];
      //dsm($element);
      // Build a list of operations.
      $operations = array();
      foreach (element_children($element['operations']) as $op) {
        $operations[] = drupal_render($element['operations'][$op]);
      }
      while (count($operations) < 2) {
        $operations[] = '';
      }

      // Add special classes to be used for tabledrag.js.
      $element['siteid']['#attributes']['class'] = 'multisite-search-siteid';
      $element['weight']['#attributes']['class'] = 'multisite-search-weight';

      $row = array();
      $row[] = drupal_render($element['title']);
      $row[] = drupal_render($element['url']);
      $row[] = drupal_render($element['prefix']);
      $row[] = drupal_render($element['weight']) . drupal_render($element['siteid']);
      $row = array_merge($row, $operations);

      $row = array_merge(array('data' => $row), $element['#attributes']);
      $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';
      $rows[] = $row;
    }
  }
  //dsm($rows);
  $output = '';
  if ($rows) {
    $output .= theme('table', $header, $rows, array('id' => 'multisite-search-overview'));
  }
  $output .= drupal_render($form);
  return $output;
}

/**
 * Form builder. Configure Cron
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function multisite_search_cron_settings() {
  $form['multisite_search_cron_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Cron TTL'),
    '#required' => TRUE,
    '#description' => 'Define the limit in seconds of multisite re-indexing process, after NNN configured the multisite search will run a reindex',
    '#default_value' => variable_get('multisite_search_cron_ttl', '3600')
  );
  return system_settings_form($form);
}

/**
 * Menu callback -- ask for confirmation of node deletion
 */
function multisite_for_multisite_search_delete_confirm(&$form_state, $siteid) {
  $form['site_id'] = array(
    '#type' => 'value',
    '#value' => $siteid,
  );
  return confirm_form($form, t('Are you sure you want to delete sub site id ' . $siteid), $_GET['destination'] ? $_GET['destination'] : 'admin/settings/multisite-search', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function multisite_for_multisite_search_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    multisite_for_multisite_search_delete_site($form_state['values']['site_id']);
  }
  $form_state['redirect'] = 'admin/settings/multisite-search';
}

function multisite_for_multisite_search_delete_site($site_id) {
  /**
   * Given the site id, retrieve the subdmn_id, and delete from the 
   * 3 tables where that content appears.
   */
  $subdmn_id = _get_subdmn_id($site_id);
  db_query("DELETE FROM {multisite_search_sites} WHERE site_id = %d", $site_id);
  db_query("DELETE FROM {multisite_search_dataset} WHERE subdmn_id = '%s'", $subdmn_id);
  db_query("DELETE FROM {multisite_search_index} WHERE subdmn_id = '%s'", $subdmn_id);
  drupal_set_message(t("Sub-site deleted successfully."));
}

/**
 * _get_subdmn_id()
 * Internal - retrieve subdmn_id when given the site_id (primary key)
 */
function _get_subdmn_id($site_id) {
  $object = db_fetch_object(db_query("SELECT table_prefix FROM {multisite_search_sites} WHERE site_id = %d", $site_id));
  return $object->table_prefix;
}

/**
 * add_multisite_for_multisite_search()
 * Page callback for admin/settings/multisite-search
 */
function add_multisite_for_multisite_search() {
  if (arg(4) == 'delete') { 
    return drupal_get_form('multisite_for_multisite_search_delete_confirm', arg(3));
  }
  
  $output = "";
  /**
   * Build formatted table of all existing sub-sites.
   */
  $sql = db_query("SELECT * FROM {multisite_search_sites} ORDER BY site_id");
  $total  = db_result(db_query("SELECT COUNT(*) FROM {multisite_search_sites} ORDER BY site_id"));
  
  $header = array("Site id", "Table prefix", "Site URL", "Site Name", "Operations");
  $rows = array();
  if($total == 0) {
  	$rows[] = array('data' => array(array('data' => 'No site found', 'colspan' => 5, 'align' => 'center')));
  }
  while($res = db_fetch_array($sql)){
    $rows[] = array($res['site_id'], $res['table_prefix'], $res['site_url'], $res['site_name'], l("delete", 'admin/settings/multisite-search/' . $res['site_id'] . '/delete'));	
  }
  $output .= theme('table', $header, $rows);
  $output .= "<br /><h2>Add New Sub-Site</h2>";
  $output .= "<p>" . t('When using table prefixing, enter a value like "tableprefix_" . When using separate databases, enter a value like "dbname." (no quotes, dot inclusive).') . "</p>";
  $output .= drupal_get_form("add_multisite_for_multisite_search_form");
  return $output;	
}

/**
 * Builds form for admin/settings/multisite-search page.
 */
function add_multisite_for_multisite_search_form(){
  $form = array();
  $form['table_prefix'] = array(
    '#title'=> t('Sub-site table prefix'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => '',
    '#attributes' => array('title' => t('Enter the table prefix of the sub-site.')),
  );
  $form['site_url'] = array(
    '#title'=> t('Sub-site URL'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => '',
    '#description' => 'The full URL of the site root. Do not include a trailing /.<br />Example: <em>http://subdomainname.domainname.com</em>',
    '#attributes' => array('title' => t('Enter the complete sub-site URL')),
  );
	$form['site_name'] = array(
    '#title'=> t('Enter the sub-site name'),
		'#type' => 'textfield',
    '#required' => TRUE,
		'#default_value' => '',
		'#description' => 'Displayed on the search results page.',
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;
}
function add_multisite_for_multisite_search_form_submit($form, &$form_state) {
  // save subsite 	
  db_query("INSERT INTO {multisite_search_sites} VALUES(NULL, '%s', '%s', '%s')", $form_state['values']['table_prefix'], $form_state['values']['site_url'], $form_state['values']['site_name']); 
  return;
}

/**
 * Create multisite search engine block 
 *
 * @param unknown_type $op
 * @param unknown_type $delta
 * @param unknown_type $edit
 * @return unknown
 */
function multisite_search_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Multisite Search Block');
      return $blocks;
    case 'configure':
      $form = array();
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
      }
      return $form;
    case 'save':
      /**
       * If $op is "save", we need to save settings from the configuration form.
       * Since the first block is the only one that allows configuration, we
       * need to check $delta to make sure we only save it.
       */
      if ($delta == 0) {
        // Have Drupal save the string to the database.
      }
      return;
    case 'view': default:
      /**
       * If $op is "view", then we need to generate the block for display
       * purposes. The $delta parameter tells us which block is being requested.
       */
      if ($op == 'view' && user_access('search content')) { 
        switch ($delta) {
          case 0:
            // The subject is displayed at the top of the block. Note that it
            // should be passed through t() for translation.
            $block['subject'] = t('');
            // The content of the block is typically generated by calling a custom
            // function.
            $block['content'] = drupal_get_form('multisite_search_block_form');
            break;
        }
      }
      return $block;
  }
} 

/**
 * Process a block search form submission.
 */
function multisite_search_box_form_submit($form, &$form_state) {	
  $form_id = $form['form_id']['#value'];
  $form_state['redirect'] = 'search/multisite_search/' . trim($form_state['values'][$form_id .'_keys']);	
}

/**
 * Theme the theme search form.
 */
function theme_multisite_search_theme_form($form) {
  return '<div id="search" class="container-inline">' . drupal_render($form) . '</div>';
}

/**
 * Theme the block search form.
 */
function theme_multisite_search_block_form($form) {
	$fst = drupal_render($form['multisite_search_block_form_keys']);
	$sec = drupal_render($form['submit']);
	$out = '<div class="container-inline">'. $fst . $sec . '</div>';
  return '<div>' . $out . '<div class="container-inline">' . drupal_render($form) .' </div></div>';
}

/**
 * Implements hook_preprocess_search_results()
 * - Theme the Multisite search results.
 */
function multisite_search_preprocess_search_results(&$variables) {
}
/**
 * Implements hook_preproces_search_results()
 * - Theme one Multisite search result entry.
 */
function multisite_search_preprocess_search_result(&$variables) {
	$site_link = l($variables['result']['site_name'], $variables['result']['site_url'], $options = array('attributes' => array('class' => 'site-link')));
  // add the site link to the "info" variable
	array_unshift($variables['info_split'], $site_link);
	$variables['info'] = implode(' - ', $variables['info_split']);
}

function multisite_search_forms() {
  $forms['multisite_search_theme_form']= array(
    'callback' => 'multisite_search_box',
    'callback arguments' => array('multisite_search_theme_form'),
  );
  $forms['multisite_search_block_form']= array(
    'callback' => 'multisite_search_box',
    'callback arguments' => array('multisite_search_block_form'),
  );
  return $forms;
}


/**
 * Output a search form for the search block and the theme's search box.
 */
function multisite_search_box(&$form_state,$form_id) {

  // Use search_keys instead of keys to avoid ID conflicts with the search block.
  $form[$form_id .'_keys'] = array(
    '#title' => t('Search all sites'),
    '#type' => 'textfield',
    '#size' => 15,	
    '#default_value' => '',
    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  $form['#submit'][] = 'multisite_search_box_form_submit';
  // Always go to the search page since the search form is not guaranteed to be on every page.
  return $form;
}


/**
 * Implementation of hook_cron().
 *
 * Combine search indexes from all sites into the multisite index (and words).
 */
function multisite_search_cron() {
  //Fetch last execution
  $msearch_last_cron_execution = variable_get('multisite_search_last_cron_execution', FALSE);
  //Validate if we are in the umbral to maintain the index search
  if($msearch_last_cron_execution && time() < ( $msearch_last_cron_execution + variable_get('multisite_search_cron_ttl', '3600')) ) {
    return false;
  } else {
    variable_set('multisite_search_last_cron_execution', time());
  }
  // set this module weight to 10
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'multisite_search'");

  /* delete multisite index */
  db_query('TRUNCATE TABLE {multisite_search_dataset}');
  db_query('TRUNCATE TABLE {multisite_search_index}');
  db_query('TRUNCATE TABLE {multisite_search_total}');
   
  // get all sites 
  $res = db_query("SELECT * FROM {multisite_search_sites}");
  while ($result = db_fetch_array($res)) {
  	// get table prefix 
  	$tblpf = $result['table_prefix'];
  	// Get all values from core search's search_dataset table and insert them into multisite dataset
 		db_query("INSERT INTO {multisite_search_dataset} SELECT sid, type, data, '" . $tblpf . "' AS subdmn_id FROM " . $tblpf . "search_dataset");
  	// Get all values from core search's search_index table and insert them into multisite index
  	db_query("INSERT INTO {multisite_search_index} (word, sid, type, subdmn_id, score) SELECT word, sid, type, '" . $tblpf . "' as subdmn_id, score FROM " . $tblpf . "search_index");
  }
  /**
   * Drupal's core search hook_cron function registers this as a shutdown function. It will
   * potentially fire after this function, but since we're updating from the multisite_search_index
   * and not the core search_index or search_total, this is no problem.
   * See search_update_totals() on line 281 of search.module.
   */
  $res3 = db_query("SELECT DISTINCT (word) FROM {multisite_search_index}");
  while($result3 = db_fetch_array($res3)){ 
    // for each word update search total
    $word = $result3['word'];
    $total = db_result(db_query("SELECT SUM(score) FROM {multisite_search_index} WHERE word = '%s'", $word));
    // Apply Zipf's law to equalize the probability distribution
    $total = log10(1 + 1/(max(1, $total)));
    /* no need to "update" any rows since we truncated above */
    db_query("INSERT INTO {multisite_search_total} (word, count) VALUES ('%s', %f)", $word, $total);
  }		
}

/**
 * Implementation of hook_search().
 */
function multisite_search_search($op = 'search', $keys = NULL) {
  switch ($op) {  
    case 'name':
      return t('All Sites'); // Used on search tab. 
    case 'reset':
      return;
    case 'search': 
      // Search the index for the keywords that were entered.
      // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();
      $arguments1 = array();
      $conditions1 = 'n.status = 1';

      if ($type = search_query_extract($keys, 'type')) {
        $types = array();
        foreach (explode(',', $type) as $t) {
          $types[] = "n.type = '%s'";
          $arguments1[] = $t;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
        $keys = search_query_insert($keys, 'type');
      }

      if ($category = search_query_extract($keys, 'category')) {
        $categories = array();
        foreach (explode(',', $category) as $c) {
          $categories[] = "tn.tid = %d";
          $arguments1[] = $c;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $categories) .')';
        $join1 .= ' INNER JOIN {term_node} tn ON n.nid = tn.nid';
        $keys = search_query_insert($keys, 'category');
      }

      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = '';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;

      // 1. factor 
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      
      // 2.factor 
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '%d * POW(2, (GREATEST(n.created, n.changed, c.last_comment_timestamp) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $join2 .= ' INNER JOIN {node} n ON n.nid = i.sid LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        $stats_join = TRUE;
        $total += $weight;
      }
      
      // 3.factor 
      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_comments_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + c.comment_count * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        }
        $total += $weight;
      }
      
      // 4.factor 
      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
          $weight = (int)variable_get('node_rank_views', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_views_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + nc.totalcount * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
        $total += $weight;
      }
      $select2 = (count($ranking) ? implode(' + ', $ranking) : 'i.relevance') .' AS score';
      
      // study things before this and is this needed assumption no 
      // Do search simple no need other table 
      $find = do_multisite_search($keys, 'node');  

      // Load results
      $results = array();
      foreach ($find as $item) { 
      	// get site table prefix 
      	$tbl_prefix = $item->subdmn_id; 
      	// get this table prefix item site url 
      	$msite_sql = db_query("SELECT * FROM {multisite_search_sites} WHERE table_prefix= '%s'", $tbl_prefix);
      	$msite_res = db_fetch_array($msite_sql);
      	$msite_url = $msite_res['site_url'];
				$msite_sitename = $msite_res['site_name'];
      	
      	global $db_prefix;
      	global $base_url;
      	global $user;

        // Build the node body. 
        /*$node = db_fetch_object(db_query("SELECT n.nid, n.vid, n.type, n.status, n.created, n.changed, n.comment, n.promote, n.sticky, r.timestamp AS revision_timestamp, r.title, r.body, r.teaser, r.log, r.format, u.uid, u.name, u.picture, u.data FROM " . $tbl_prefix . "node n INNER JOIN drupal_shared.users u ON u.uid = n.uid INNER JOIN " . $tbl_prefix . "node_revisions r ON r.vid = n.vid WHERE n.nid=%d", $item->sid));*/
        $node = db_fetch_object(db_query("SELECT n.nid, n.vid, n.type, n.status, n.created, n.changed, n.comment, n.promote, n.sticky, r.timestamp AS revision_timestamp, r.title, r.body, r.teaser, r.log, r.format FROM " . $tbl_prefix . "node n INNER JOIN " . $tbl_prefix . "node_revisions r ON r.vid = n.vid WHERE n.nid=%d", $item->sid));

        // Fetch comments for snippet 
        // Fetch terms for snippet
        $extra = array(); 
        // assuming have to show only total comment 
        $comments = db_result(db_query('SELECT comment_count FROM '.$tbl_prefix.'node_comment_statistics WHERE nid = %d', $node->nid));
        $extra[] = format_plural($comments, '1 comment', '@count comments');

        /**
         * Removed user links altogether. The theory is that there's no way to know if the currently
         * logged in user has access to any of the other sites. So, rather than introduce a lot of
         * overhead to check user permissions, just print the username.
         * TODO: Add link if requested
         */
        /*if(user_access('access user profiles') ){ 
          $tuname = "<a href='" . $msite_url . url('user/' . $node->uid) . "'>" . $node->name . "</a>";	
        }else{
          $tuname = $node->name;	
        }*/
        //$tuname = $node->name;
        
        $results[] = array(
          /**
           * Be forgiving; add http:// if they forgot it. Using type equals (===) because
           * the correct value will be 0.
           */
          'link' => ((strpos($msite_url, 'http://') === 0) ? '' : "http://") . $msite_url . "/" . _multisite_search_get_path_alias('node/' . $item->sid, '', $tbl_prefix),
					'type' => node_get_types('name', $node),
					'title' => $node->title,
					'user' => $tuname,
					'date' => $node->changed,
					'node' => $node,
					'extra' => $extra,
					'score' => $item->score / $total,
					'snippet' => search_excerpt($keys, $node->body),
					'site_url' => $msite_url, /* site_name and url added for display purposes */
					'site_name' => $msite_sitename,
				);
      }
      return $results;
  }
}

/**
 * _multisite_search_get_path_alias()
 *
 * Helper function - manually searchs the path table and retrieves the path alias, 
 * if there is one.
 */
function _multisite_search_get_path_alias($path, $path_language = '', $prefix) {
  $result = $path;
  if ($alias = _multisite_search_lookup_path('alias', $path, $path_language, $prefix)) {
    $result = $alias;
  }
  return $result;
}
/**
 * _multisitie_search_lookup_path()
 *
 * Helper function - search path table.
 */
function _multisite_search_lookup_path($action, $path = '', $path_language = '', $prefix = '') {
  global $language;

  $path_language = $path_language ? $path_language : $language->language;

  if (isset($map[$path_language][$path])) {
    return $map[$path_language][$path];
  }
  // Get the most fitting result falling back with alias without language
  $alias = db_result(db_query("SELECT dst FROM " . $prefix . "url_alias WHERE src = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language));
 
  return $alias;
}


/**
 * Do a query on the full-text search index for a word or words.
 *
 * This function is normally only called by each module that support the
 * indexed search (and thus, implements hook_update_index()).
 *
 * Two queries are performed which can be extended by the caller.
 *
 * The first query SELECTs a set of possible matches based on the search index
 * and any extra given restrictions. This is the classic "OR" search.
 *
 * SELECT i.type, i.sid, SUM(i.score*t.count) AS relevance
 * FROM {search_index} i
 * INNER JOIN {search_total} t ON i.word = t.word
 * $join1
 * WHERE $where1 AND (...)
 * GROUP BY i.type, i.sid
 *
 * The second query further refines this set by verifying advanced text
 * conditions (such as AND, negative or phrase matches), and orders the results
 * on a the column or expression 'score':
 *
 * SELECT i.type, i.sid, $select2
 * FROM temp_search_sids i
 * INNER JOIN {search_dataset} d ON i.sid = d.sid AND i.type = d.type
 * $join2
 * WHERE (...)
 * ORDER BY score DESC
 *
 * @param $keywords
 *   A search string as entered by the user.
 *
 * @param $type
 *   A string identifying the calling module.
 *
 * @param $join1
 *   (optional) Inserted into the JOIN part of the first SQL query.
 *   For example "INNER JOIN {node} n ON n.nid = i.sid".
 *
 * @param $where1
 *   (optional) Inserted into the WHERE part of the first SQL query.
 *   For example "(n.status > %d)".
 *
 * @param $arguments1
 *   (optional) Extra SQL arguments belonging to the first query.
 *
 * @param $select2
 *   (optional) Inserted into the SELECT pat of the second query. Must contain
 *   a column selected as 'score'.
 *   defaults to 'i.relevance AS score'
 *
 * @param $join2
 *   (optional) Inserted into the JOIN par of the second SQL query.
 *   For example "INNER JOIN {node_comment_statistics} n ON n.nid = i.sid"
 *
 * @param $arguments2
 *   (optional) Extra SQL arguments belonging to the second query parameter.
 *
 * @param $sort_parameters
 *   (optional) SQL arguments for sorting the final results.
 *              Default: 'ORDER BY score DESC'
 *
 * @return
 *   An array of SIDs for the search results.
 *
 * @ingroup search
 */
function do_multisite_search($keywords, $type, $join1 = '', $where1 = '1', $arguments1 = array(), $select2 = 'i.relevance AS score', $join2 = '', $arguments2 = array(), $sort_parameters = 'ORDER BY score DESC') {
  $query = search_parse_query($keywords);

  if ($query[2] == '') {
    form_set_error('keys', t('You must include at least one positive keyword with @count characters or more.', array('@count' => variable_get('minimum_word_size', 3))));
  }
  if ($query === NULL || $query[0] == '' || $query[2] == '') {
    return array();
  }

  // First pass: select all possible matching sids, doing a simple index-based OR matching on the keywords.
  // 'matches' is used to reject those items that cannot possibly match the query.
  $conditions = $where1 .' AND ('. $query[2] .") AND i.type = '%s'";
  $arguments = array_merge($arguments1, $query[3], array($type, $query[4]));
  $result = db_query_temporary("SELECT i.type, i.sid, i.subdmn_id, SUM(i.score * t.count) AS relevance, COUNT(*) AS matches FROM {multisite_search_index} i INNER JOIN {multisite_search_total} t ON i.word = t.word $join1 WHERE $conditions GROUP BY i.subdmn_id, i.type, i.sid HAVING COUNT(*) >= %d", $arguments, 'temp_search_sids');

  // Calculate maximum relevance, to normalize it
  $normalize = db_result(db_query('SELECT MAX(relevance) FROM temp_search_sids'));
  if (!$normalize) {
    return array();
  }
  $select2 = str_replace('i.relevance', '('. (1.0 / $normalize) .' * i.relevance)', $select2);

  // Second pass: only keep items that match the complicated keywords conditions (phrase search, negative keywords, ...)
  $conditions = '('. $query[0] .')';
  $arguments = array_merge($arguments2, $query[1]);
  $result = db_query_temporary("SELECT i.type, i.sid, i.subdmn_id, $select2 FROM temp_search_sids i INNER JOIN {multisite_search_dataset} d ON i.sid = d.sid AND i.type = d.type AND i.subdmn_id = d.subdmn_id $join2 WHERE $conditions $sort_parameters", $arguments, 'temp_search_results');
  if (($count = db_result(db_query('SELECT COUNT(*) FROM temp_search_results'))) == 0) {
    return array();
  }
  $count_query = "SELECT $count";

  // Do actual search query
  $result = pager_query("SELECT * FROM temp_search_results", 10, 0, $count_query);
  $results = array();
  while ($item = db_fetch_object($result)) {
    $results[] = $item;
  }
  return $results;
}
